import re
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    CallbackQueryHandler
)
from config import ADMIN_ID
from config import BOT_TOKEN
import json
import os

# –ú–æ–∏ –∑–∞–ø–∏—Å–∏

async def my_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if "records" not in context.application.bot_data:
        context.application.bot_data["records"] = load_records()

    records = context.application.bot_data["records"].get(str(user_id)) or context.application.bot_data["records"].get(user_id)

    if not records:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    message = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:"
    for i, r in enumerate(records, 1):
        message += (
            f"\n{i}. {r['name']}"
            f"\n   üìû {r['phone']}"
            f"\n   üïí {r['time']}\n"
        )
    await update.message.reply_text(message)

#################################################################################
# –í—Å–µ –ó–∞–ø–∏—Å–∏
async def all_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = ADMIN_ID
    user_id = update.message.from_user.id

    if user_id != admin_id:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –î–∞–Ω–Ω—ã–µ —Å JSON
    all_data = context.application.bot_data.get("records", {})
    if not all_data:
        await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
    counter = 1  # <-- –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏

    for uid, records in all_data.items():
        for r in records:
            username = f"@{r['username']}" if r.get("username") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            msg += (
                f"‚Ññ{counter}:\n"
                f"üë§ {r['name']}\n"
                f"üìû {r['phone']}\n"
                f"üïí {r['time']}\n"
                f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n\n"
            )
            counter += 1

    await update.message.reply_text(msg)

# –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è
async def admin_delete_record(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    all_data = context.application.bot_data.get("records", {})
    if not all_data:
        await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫
    all_entries = []
    msg = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    counter = 1
    for uid, records in all_data.items():
        for rec in records:
            username = f"@{rec['username']}" if rec.get("username") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            all_entries.append((uid, rec))
            msg += (
                f"\n‚Ññ{counter}:\n"
                f"üë§ {rec['name']}\n"
                f"üìû {rec['phone']}\n"
                f"üïí {rec['time']}\n"
                f"üÜî {username}\n"
            )
            counter += 1

    if not all_entries:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    context.user_data["all_entries"] = all_entries
    await update.message.reply_text(msg + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return 200  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def confirm_admin_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
        return 200

    index = int(text) - 1
    all_entries = context.user_data.get("all_entries")
    if not all_entries or index >= len(all_entries):
        await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.")
        return 200

    uid, rec = all_entries[index]
    context.application.bot_data["records"][uid].remove(rec)

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º ‚Äî —É–¥–∞–ª—è–µ–º –∫–ª—é—á
    if not context.application.bot_data["records"][uid]:
        del context.application.bot_data["records"][uid]

    from records import save_records
    save_records(context.application.bot_data["records"])

    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {rec['name']} | {rec['phone']} | {rec['time']}")
    return ConversationHandler.END


RECORDS_FILE = "records.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_records():
    if os.path.exists(RECORDS_FILE):
        try:
            with open(RECORDS_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    return {}  # —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
                return json.loads(content)
        except json.JSONDecodeError:
            print("[ERROR] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
            return {}
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_records(data):
    with open(RECORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def cancel_record(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    records = context.application.bot_data.get("records", {}).get(user_id)
 
 # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if "records" not in context.application.bot_data:
        context.application.bot_data["records"] = load_records()

    records = context.application.bot_data["records"].get(str(user_id)) or context.application.bot_data["records"].get(user_id)

    if not records:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ user_data –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    context.user_data["cancel_options"] = records
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for i, r in enumerate(records, 1):
        msg += (
        f"‚Ññ{i}:\n"
        f"üë§ {r['name']}\n"
        f"üìû {r['phone']}\n"
        f"üïí {r['time']}\n\n"
        )

          
    msg += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):"
    await update.message.reply_text(msg)
    return 100  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def confirm_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return 100

    index = int(text) - 1
    records = context.user_data.get("cancel_options")

    if index < 0 or index >= len(records):
        await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.")
        return 100

    removed = records.pop(index)
    user_id = update.message.from_user.id
    context.application.bot_data["records"][user_id] = records
    from records import save_records
    save_records(context.application.bot_data["records"])

    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {removed['time']} —É–¥–∞–ª–µ–Ω–∞.")
    return ConversationHandler.END
