import re
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from config import ADMIN_ID
from config import BOT_TOKEN
import json
import os



# –ú–æ–∏ –∑–∞–ø–∏—Å–∏

async def my_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[LOG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text!r}")  # <-- –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    user_id = update.message.from_user.id
    records = context.application.bot_data.get("records", {}).get(user_id)

    if not records:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    message = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:"
    for i, r in enumerate(records, 1):
        message += f"\n{i}. {r['name']} | {r['phone']} | {r['time']}"
    await update.message.reply_text(message)

async def all_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = ADMIN_ID
    user_id = update.message.from_user.id

    if user_id != admin_id:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    all_data = context.application.bot_data.get("records", {})
    if not all_data:
        await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
    for uid, records in all_data.items():
        for r in records:
            username = f"@{update.message.from_user.username}" if update.message.from_user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            msg += f"\nüë§ {r['name']} | üìû {r['phone']} | üïí {r['time']} | üÜî {uid}"

    await update.message.reply_text(msg)

RECORDS_FILE = "records.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_records():
    if os.path.exists(RECORDS_FILE):
        try:
            with open(RECORDS_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    return {}  # —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
                return json.loads(content)
        except json.JSONDecodeError:
            print("[ERROR] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
            return {}
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_records(data):
    with open(RECORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
