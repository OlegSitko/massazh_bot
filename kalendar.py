import re
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    CallbackQueryHandler
)
import calendar
from records import my_records, all_records, cancel_record, save_records, load_records
from datetime import date, timedelta
from config import ADMIN_ID
from config import BOT_TOKEN
import json
import os
from telegram import KeyboardButton

async def handle_admin_day_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("admin_day_"):
        return

    selected_date = data.replace("admin_day_", "")
    all_records = context.application.bot_data.get("records", {})
    found = []

    for rec_list in all_records.values():
        for r in rec_list:
            if r["time"].startswith(selected_date):
                found.append(r)

    if not found:
        await query.edit_message_text(f"–ù–∞ {selected_date} –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    msg = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {selected_date}:\n"
    for i, r in enumerate(found, 1):
        msg += (
            f"\n{i}. üë§ {r['name']}\n"
            f"üìû {r['phone']}\n"
            f"üïí {r['time']}\n"
            f"üÜî {r['username']}\n"
        )

    await query.edit_message_text(msg)


async def admin_calendar_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    year, month = today.year, today.month
    cal = calendar.Calendar(firstweekday=0)
    month_days = cal.itermonthdays(year, month)

    all_records = context.application.bot_data.get("records", {})
    booked_dates = set()

    for rec_list in all_records.values():
        for r in rec_list:
            match = re.match(r"(\d{2})\.(\d{2})\.(\d{4})", r["time"])
            if match:
                booked_dates.add(match.group(0))

    keyboard = []
    week = []

    for day in month_days:
        if day == 0:
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        else:
            current_date = date(year, month, day).strftime("%d.%m.%Y")
            if current_date in booked_dates:
                text = f"{day}üü¢"
                callback = f"admin_day_{current_date}"
            else:
                text = f"{day}"
                callback = "ignore"

            week.append(InlineKeyboardButton(text, callback_data=callback))

        if len(week) == 7:
            keyboard.append(week)
            week = []

    if week:
        keyboard.append(week)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {calendar.month_name[month]} {year}:\nüü¢ ‚Äî –µ—Å—Ç—å –∑–∞–ø–∏—Å—å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É)",
        reply_markup=reply_markup
    )


async def inline_calendar_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    year, month = today.year, today.month
    cal = calendar.Calendar(firstweekday=0)
    month_days = cal.itermonthdays(year, month)

    keyboard = []
    week = []

    for day in month_days:
        if day == 0:
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        else:
            week.append(InlineKeyboardButton(str(day), callback_data=f"day_{day}"))

        if len(week) == 7:
            keyboard.append(week)
            week = []

    if week:
        keyboard.append(week)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ({calendar.month_name[month]} {year}):",
        reply_markup=reply_markup
    )


async def handle_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith("day_"):
        return

    selected_day = int(data.split("_")[1])
    today = date.today()
    selected_date = date(today.year, today.month, selected_day)
    formatted = selected_date.strftime("%d.%m.%Y")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ user_data
    context.user_data["selected_date"] = formatted

    # –ö–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    times = ["10:00", "12:00", "14:00", "16:00", "18:00"]
    keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dates")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: *{formatted}*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def handle_back_to_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã...")
    await inline_calendar_view(update, context)


async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("time_"):
        return

    selected_time = data.split("_")[1]
    selected_date = context.user_data.get("selected_date")

    if not selected_date:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞.")
        return

    full_slot = f"{selected_date} –≤ {selected_time}"

    user = query.from_user
    user_id = user.id
    username = f"@{user.username}" if user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    name = context.user_data.get("name", user.first_name)
    phone = context.user_data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    all_records = context.application.bot_data.get("records", {})
    for uid, rec_list in all_records.items():
        for record in rec_list:
            if record["time"] == full_slot:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
                times = ["10:00", "12:00", "14:00", "16:00", "18:00"]
                keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times]
                keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dates")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"‚ùå –í—Ä–µ–º—è {full_slot} —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=reply_markup
                )
                return


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    context.application.bot_data.setdefault("records", {})
    context.application.bot_data["records"].setdefault(user_id, []).append({
        "name": name,
        "phone": phone,
        "time": full_slot,
        "username": username
    })
    save_records(context.application.bot_data["records"])

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [KeyboardButton("–ú–æ–∏ –ó–∞–ø–∏—Å–∏")],
        [KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await context.bot.send_message(
        chat_id=user_id,
        text=(
            f"–°–ø–∞—Å–∏–±–æ, {name}!\n"
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\nüìû {phone}\nüïí {full_slot}\n\n"
            f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
            f"Telegram: @qwerty4666\n–¢–µ–ª–µ—Ñ–æ–Ω: +375293541777"
        ),
        reply_markup=reply_markup
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    from config import ADMIN_ID
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üïí –í—Ä–µ–º—è: {full_slot}\n"
            f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
        )
    )
