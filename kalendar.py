import re
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    CallbackQueryHandler
)
import calendar
from records import my_records, all_records, cancel_record, save_records, load_records
from datetime import date, timedelta
from config import ADMIN_ID
from config import BOT_TOKEN
import json
import os
from telegram import KeyboardButton

async def handle_admin_day_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("admin_day_"):
        return

    selected_date = data.replace("admin_day_", "")
    all_records = context.application.bot_data.get("records", {})
    found = []

    # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    for rec_list in all_records.values():
        for r in rec_list:
            if r["time"].startswith(selected_date):
                found.append(r)

    if not found:
        await query.edit_message_text(f"–ù–∞ {selected_date} –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    msg = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {selected_date}:\n"
    for i, r in enumerate(found, 1):
        msg += (
            f"\n{i}. üë§ {r['name']}\n"
            f"üìû {r['phone']}\n"
            f"üïí {r['time']}\n"
            f"üÜî {r['username']}\n"
        )

    await query.edit_message_text(msg)


async def admin_calendar_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø update –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print(f"Received update: {update}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query –∏–ª–∏ message
    if update.callback_query:
        user_id = update.callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
        if user_id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
            await update.callback_query.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.")
            return
    elif update.message:
        user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
            await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.")
            return
    else:
        return  # –ï—Å–ª–∏ update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ message, –Ω–∏ callback_query

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ user_data
    current_month = context.user_data.get("current_month", date.today().month)
    current_year = context.user_data.get("current_year", date.today().year)

    # –°—Ç—Ä–æ–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    cal = calendar.Calendar(firstweekday=0)
    month_days = cal.itermonthdays(current_year, current_month)
    
    all_records = context.application.bot_data.get("records", {})
    booked_dates = set()

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã
    for rec_list in all_records.values():
        for r in rec_list:
            match = re.match(r"(\d{2})\.(\d{2})\.(\d{4})", r["time"])
            if match:
                booked_dates.add(match.group(0))

    keyboard = []
    week = []

    # –°—Ç—Ä–æ–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø–æ–º–µ—Ç–∫–∞–º–∏
    for day in month_days:
        if day == 0:
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        else:
            current_date = date(current_year, current_month, day).strftime("%d.%m.%Y")
            if current_date in booked_dates:
                text = f"{day}üü¢"  # –ó–µ–ª–µ–Ω–∞—è –º–µ—Ç–∫–∞, –µ—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞
                callback = f"admin_day_{current_date}"
            else:
                text = f"{day}"
                callback = f"day_{current_date}"

            week.append(InlineKeyboardButton(text, callback_data=callback))

        if len(week) == 7:
            keyboard.append(week)
            week = []

    if week:
        keyboard.append(week)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="prev_month"),
        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ‚û°Ô∏è", callback_data="next_month")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["current_month"] = current_month
    context.user_data["current_year"] = current_year

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.callback_query:
        await update.callback_query.message.reply_text(
            f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {calendar.month_name[current_month]} {current_year}:\nüü¢ ‚Äî –µ—Å—Ç—å –∑–∞–ø–∏—Å—å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É)",
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {calendar.month_name[current_month]} {current_year}:\nüü¢ ‚Äî –µ—Å—Ç—å –∑–∞–ø–∏—Å—å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É)",
            reply_markup=reply_markup
        )



async def handle_month_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ user_data
    current_month = context.user_data.get("current_month", date.today().month)
    current_year = context.user_data.get("current_year", date.today().year)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ (—Ç–µ–∫—É—â–∏–π, –ø—Ä–µ–¥—ã–¥—É—â–∏–π, —Å–ª–µ–¥—É—é—â–∏–π)
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã.
    if data == "prev_month":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        if current_month == 1:  # –Ø–Ω–≤–∞—Ä—å - –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥
            await query.edit_message_text("‚õîÔ∏è –≠—Ç–æ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –≥–æ–¥–∞, –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥.")
            return
        # –£–º–µ–Ω—å—à–∞–µ–º –º–µ—Å—è—Ü
        current_month -= 1

    elif data == "next_month":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        if current_month == 12:  # –î–µ–∫–∞–±—Ä—å - –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –≤–ø–µ—Ä–µ–¥
            await query.edit_message_text("‚õîÔ∏è –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≥–æ–¥–∞, –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –≤–ø–µ—Ä–µ–¥.")
            return
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Å—è—Ü
        current_month += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –º–µ—Å—è—Ü –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ, —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–µ–≤
    if current_month < (date.today().month - 1) or current_month > (date.today().month + 1):
        await query.edit_message_text("‚õîÔ∏è –í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["current_month"] = current_month
    context.user_data["current_year"] = current_year

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await admin_calendar_view(update, context)



async def inline_calendar_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    year, month = today.year, today.month
    cal = calendar.Calendar(firstweekday=0)
    month_days = cal.itermonthdays(year, month)

    keyboard = []
    week = []

    for day in month_days:
        if day == 0:
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        else:
            week.append(InlineKeyboardButton(str(day), callback_data=f"day_{day}"))

        if len(week) == 7:
            keyboard.append(week)
            week = []

    if week:
        keyboard.append(week)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ({calendar.month_name[month]} {year}):",
        reply_markup=reply_markup
    )


async def handle_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith("day_"):
        return

    selected_day = int(data.split("_")[1])
    today = date.today()
    selected_date = date(today.year, today.month, selected_day)
    formatted = selected_date.strftime("%d.%m.%Y")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ user_data
    context.user_data["selected_date"] = formatted

    # –ö–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    times = ["10:00", "12:00", "14:00", "16:00", "18:00"]
    keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dates")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: *{formatted}*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def handle_back_to_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã...")
    await inline_calendar_view(update, context)


async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("time_"):
        return

    selected_time = data.split("_")[1]
    selected_date = context.user_data.get("selected_date")

    if not selected_date:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞.")
        return

    full_slot = f"{selected_date} –≤ {selected_time}"

    user = query.from_user
    user_id = user.id
    username = f"@{user.username}" if user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    name = context.user_data.get("name", user.first_name)
    phone = context.user_data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    all_records = context.application.bot_data.get("records", {})
    for uid, rec_list in all_records.items():
        for record in rec_list:
            if record["time"] == full_slot:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
                times = ["10:00", "12:00", "14:00", "16:00", "18:00"]
                keyboard = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times]
                keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dates")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"‚ùå –í—Ä–µ–º—è {full_slot} —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=reply_markup
                )
                return


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    context.application.bot_data.setdefault("records", {})
    context.application.bot_data["records"].setdefault(user_id, []).append({
        "name": name,
        "phone": phone,
        "time": full_slot,
        "username": username
    })
    save_records(context.application.bot_data["records"])

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [KeyboardButton("–ú–æ–∏ –ó–∞–ø–∏—Å–∏")],
        [KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await context.bot.send_message(
        chat_id=user_id,
        text=(
            f"–°–ø–∞—Å–∏–±–æ, {name}!\n"
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\nüìû {phone}\nüïí {full_slot}\n\n"
            f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
            f"Telegram: @qwerty4666\n–¢–µ–ª–µ—Ñ–æ–Ω: +375293541777"
        ),
        reply_markup=reply_markup
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    from config import ADMIN_ID
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üïí –í—Ä–µ–º—è: {full_slot}\n"
            f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
        )
    )
